#classic env
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split
#fix fig size
plt.rcParams["figure.figsize"]=16,9

dataset = pd.read_csv('regression.csv')
dataset = dataset.drop(columns=['Extracurricular Activities'])

X = dataset.iloc[:, :4]
y = dataset.iloc[:, -1]

X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

tf.keras.utils.set_random_seed(42)

model = tf.keras.Sequential([
		tf.keras.layers.Input(shape=X_train.shape[1:]),
		tf.keras.layers.Dense(50, activation="relu"),
		tf.keras.layers.Dense(30, activation="tanh"),
		tf.keras.layers.Dense(10, activation="relu"),
		tf.keras.layers.Dense(1, activation="relu")
])

early_stopping_cb = tf.keras.callbacks.EarlyStopping(monitor='val_loss', patience=100, restore_best_weights=True)
opt = tf.keras.optimizers.Adam(learning_rate=0.001)
model.compile(loss="mae", optimizer=opt)

print('LEARNING IN PROGRESS...')
history = model.fit(X_train, y_train, epochs=1000, validation_data=(X_val, y_val), callbacks=early_stopping_cb, verbose=0)
print('')

print('TRAIN PERFORMANCE:')
print(model.evaluate(X_train, y_train, verbose=0))
print('')

print('VALIDATION PERFORMANCE:')
print(model.evaluate(X_val, y_val, verbose=0))
print('')

print('TEST PERFORMANCE:')
print(model.evaluate(X_test, y_test, verbose=0))
print('')

print('NEURAL NETWORK ARCHITECTURE:')
model.summary()
print('')

print('LEARNING CURVES:')
pd.DataFrame(history.history).plot(xlim=[0, early_stopping_cb.stopped_epoch + 1], grid=True, xlabel="Epoch", style=["r--", "b-"])
plt.show()